class Board {
  field boolean isFinished;
  field Array history;
  field int secondRow, thirdRow, fourthRow, fifthRow, seventhRow, eigthRow, ninthRow, tenthRow, twelfthRow, thirteethRow, fourteethRow, fifteethRow, endStatus;
  // それぞれのセルが固有値を持っていてそれを加算,減算していけば意外とサクッと行けそう
  // 1, 2, 4 ...
  // 0: not over, 1: player 1 won, 2: player 2 won, 3: even;

  constructor Board new() {
    var int base;
    let base = -31711;

    let history = initializeHistoy(); // 0 -> blank, 1 -> p1, 2 -> p2
    let secondRow = base;
    let thirdRow = base;
    let fourthRow = base;
    let fifthRow = base;
    let seventhRow = base;
    let eigthRow = base;
    let ninthRow = base;
    let tenthRow = base;
    let twelfthRow = base;
    let thirteethRow = base;
    let fourteethRow = base;
    let fifteethRow = base;

    let endStatus = 0;
    return this;
  }

  method void draw() {
    var int memAddress;
  	let memAddress = 16384;

  	do Memory.poke(memAddress+0, -1);
  	do Memory.poke(memAddress+32, secondRow);
  	do Memory.poke(memAddress+64, thirdRow);
  	do Memory.poke(memAddress+96, fourthRow);
  	do Memory.poke(memAddress+128, fifthRow);
  	do Memory.poke(memAddress+160, -1);
  	do Memory.poke(memAddress+192, seventhRow);
  	do Memory.poke(memAddress+224, eigthRow);
  	do Memory.poke(memAddress+256, ninthRow);
  	do Memory.poke(memAddress+288, tenthRow);
  	do Memory.poke(memAddress+320, -1);
  	do Memory.poke(memAddress+352, twelfthRow);
  	do Memory.poke(memAddress+384, thirteethRow);
  	do Memory.poke(memAddress+416, fourteethRow);
  	do Memory.poke(memAddress+448, fifteethRow);
  	do Memory.poke(memAddress+480, -1);
  	return;
  }

  method int getEndStatus() {
    return endStatus;
  }

  // return false if the cell is already occupied
  method boolean playFirst(int cellNumber) {
    if (~(history[cellNumber] = 0)){
      return false;
    }

    do setOne(cellNumber);
    let history[cellNumber] = 1;
    let endStatus = judge(1, cellNumber);
    return true;
  }

  // return false if the cell is already occupied
  method boolean playSecond(int cellNumber) {
    if (~(history[cellNumber] = 0)){
      return false;
    }

    do setTwo(cellNumber);
    let history[cellNumber] = 2;
    let endStatus = judge(2, cellNumber);
    return true;
  }

  method void setOne(int cellNumber) {
    if (cellNumber = 0) {
      let thirdRow = thirdRow + 12;
      let fourthRow = fourthRow + 12;
    }

    if (cellNumber = 3) {
      let eigthRow = eigthRow + 12;
      let ninthRow = ninthRow + 12;
    }

    if (cellNumber = 6) {
      let thirteethRow = thirteethRow + 12;
      let fourteethRow = fourteethRow + 12;
    }

    if (cellNumber = 1) {
      let thirdRow = thirdRow + 384;
      let fourthRow = fourthRow + 384;
    }

    if (cellNumber = 4) {
      let eigthRow = eigthRow + 384;
      let ninthRow = ninthRow + 384;
    }

    if (cellNumber = 7) {
      let thirteethRow = thirteethRow + 384;
      let fourteethRow = fourteethRow + 384;
    }

    if (cellNumber = 2) {
      let thirdRow = thirdRow + 12288;
      let fourthRow = fourthRow + 12288;
    }

    if (cellNumber = 5) {
      let eigthRow = eigthRow + 12288;
      let ninthRow = ninthRow + 12288;
    }

    if (cellNumber = 8) {
      let thirteethRow = thirteethRow + 12288;
      let fourteethRow = fourteethRow + 12288;
    }

    return;
  }

  method void setTwo(int cellNumber) {
    if (cellNumber = 0) {
      let secondRow = secondRow + 30;
      let thirdRow = thirdRow + 18;
      let fourthRow = fourthRow + 18;
      let fifthRow = fifthRow + 30;
    }

    if (cellNumber = 3) {
      let seventhRow = seventhRow + 30;
      let eigthRow = eigthRow + 18;
      let ninthRow = ninthRow + 18;
      let tenthRow = tenthRow + 30;
    }

    if (cellNumber = 6) {
      let twelfthRow = twelfthRow + 30;
      let thirteethRow = thirteethRow + 18;
      let fourteethRow = fourteethRow + 18;
      let fifteethRow = fifteethRow + 30;
    }

    if (cellNumber = 1) {
      let secondRow = secondRow + 960;
      let thirdRow = thirdRow + 576;
      let fourthRow = fourthRow + 576;
      let fifthRow = fifthRow + 960;
    }

    if (cellNumber = 4) {
      let seventhRow = seventhRow + 960;
      let eigthRow = eigthRow + 576;
      let ninthRow = ninthRow + 576;
      let tenthRow = tenthRow + 960;
    }

    if (cellNumber = 7) {
      let twelfthRow = twelfthRow + 960;
      let thirteethRow = thirteethRow + 576;
      let fourteethRow = fourteethRow + 576;
      let fifteethRow = fifteethRow + 960;
    }

    if (cellNumber = 2) {
      let secondRow = secondRow + 30720;
      let thirdRow = thirdRow + 18432;
      let fourthRow = fourthRow + 18432;
      let fifthRow = fifthRow + 30720;
    }

    if (cellNumber = 5) {
      let seventhRow = seventhRow + 30720;
      let eigthRow = eigthRow + 18432;
      let ninthRow = ninthRow + 18432;
      let tenthRow = tenthRow + 30720;
    }

    if (cellNumber = 8) {
      let twelfthRow = twelfthRow + 30720;
      let thirteethRow = thirteethRow + 18432;
      let fourteethRow = fourteethRow + 18432;
      let fifteethRow = fifteethRow + 30720;
    }

    return;
  }

  method int judge(int player, int cellNumber) {
    if (isOver()){
      return 3;
    }

    if (cellNumber = 0) {
      if (isTopRowCompleted(player) | isLeftColCompleted(player) | isRightBottomCrossCompleted(player)){
        return player;
      }
    }

    if (cellNumber = 1) {
      if (isTopRowCompleted(player) | isMiddleColCompleted(player)){
        return player;
      }
    }

    if (cellNumber = 2) {
      if (isTopRowCompleted(player) | isRightColCompleted(player) | isLeftBottomCrossCompleted(player)){
        return player;
      }
    }

    if (cellNumber = 3) {
      if (isMiddleRowCompleted(player) | isLeftColCompleted(player)){
        return player;
      }
    }

    if (cellNumber = 4) {
      if (isMiddleRowCompleted(player) | isMiddleColCompleted(player)){
        return player;
      }
    }

    if (cellNumber = 5) {
      if (isMiddleRowCompleted(player) | isRightColCompleted(player)){
        return player;
      }
    }

    if (cellNumber = 6) {
      if (isBottomRowCompleted(player) | isLeftColCompleted(player) | isLeftBottomCrossCompleted(player)){
        return player;
      }
    }

    if (cellNumber = 7) {
      if (isBottomRowCompleted(player) | isMiddleColCompleted(player)){
        return player;
      }
    }

    if (cellNumber = 8) {
      if (isBottomRowCompleted(player) | isRightColCompleted(player) | isRightBottomCrossCompleted(player)){
        return player;
      }
    }

    return 0;
  }

  method boolean isOver() {
    var int i;
    let i = 0;

    while(i < 9) {
      if (history[i] = 0){
        return false;
      }

      let i = i + 1;
    }

    return true;
  }

  method boolean isTopRowCompleted(int player) {
    if(history[0] = player & history[1] = player & history[2] = player) {
      return true;
    }

    return false;
  }

  method boolean isMiddleRowCompleted(int player) {
    if(history[3] = player & history[4] = player & history[5] = player) {
      return true;
    }

    return false;
  }

  method boolean isBottomRowCompleted(int player) {
    if(history[6] = player & history[7] = player & history[8] = player){
      return true;
    }

    return false;
  }

  method boolean isLeftColCompleted(int player) {
    if(history[0] = player & history[3] = player & history[6] = player){
      return true;
    }

    return false;
  }

  method boolean isMiddleColCompleted(int player) {
    if(history[1] = player & history[4] = player & history[7] = player){
      return true;
    }

    return false;
  }

  method boolean isRightColCompleted(int player) {
    if(history[2] = player & history[5] = player & history[8] = player){
      return true;
    }

    return false;
  }

  method boolean isRightBottomCrossCompleted(int player) {
    if(history[0] = player & history[4] = player & history[8] = player){
      return true;
    }

    return false;
  }

  method boolean isLeftBottomCrossCompleted(int player) {
    if(history[2] = player & history[4] = player & history[6] = player){
      return true;
    }

    return false;
  }

  method Array initializeHistoy() {
    var Array arr;
    var int i;

    let arr = Array.new(9);
    let i = 0;

    while(i < 9) {
      let arr[i] = 0;
      let i = i + 1;
    }

    return arr;
  }
}
